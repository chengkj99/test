/*
 * @lc app=leetcode.cn id=8 lang=javascript
 *
 * [8] 字符串转换整数 (atoi)
 *
 */
/**
 * 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
 * 函数 myAtoi(string s) 的算法如下：
 *
 * 读入字符串并丢弃无用的前导空格
 * 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
 * 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
 * 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
 * 如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
 * 返回整数作为最终结果。
 *
 * 注意：
 * 本题中的空白字符只包括空格字符 ' ' 。
 * 除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
 *
 */

//示例 1：
// 输入：s = "42"
// 输出：42
// 解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
// 第 1 步："42"（当前没有读入字符，因为没有前导空格）
//          ^
// 第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
//          ^
// 第 3 步："42"（读入 "42"）
//            ^
// 解析得到整数 42 。
// 由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。

// 示例 2：
// 输入：s = "   -42"
// 输出：-42
// 解释：
// 第 1 步："   -42"（读入前导空格，但忽视掉）
//             ^
// 第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）
//              ^
// 第 3 步："   -42"（读入 "42"）
//                ^
// 解析得到整数 -42 。
// 由于 "-42" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。

// 示例 3：
// 输入：s = "4193 with words"
// 输出：4193
// 解释：
// 第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）
//          ^
// 第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
//          ^
// 第 3 步："4193 with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）
//              ^
// 解析得到整数 4193 。
// 由于 "4193" 在范围 [-231, 231 - 1] 内，最终结果为 4193 。

// @lc code=start
/**
 * @param {string} s
 * @return {number}
 */

// var myAtoi = function (s) {
//   let sl = s.split('')
//   let ns = []
//   let f = ''
//   for (let i = 0; i < sl.length; i++) {
//     let cur = sl[i]
//     if (f === '' && (cur === '-' || cur === '+')) {
//       f = cur
//       continue
//     }
//     if (cur === ' ' || cur === '0' || cur === '+') {
//       continue
//     }

//     if (!/\d/.test(cur) && ns.length === 0) {
//       return 0
//     }
//     if (cur === '.') {
//       break
//     }
//     if (/\d/.test(cur)) {
//       ns.push(cur)
//       continue
//     }
//   }
//   let r = ns.length > 0 ? +(f + ns.join('')) : 0
//   if (r >= 2 ** 31 - 1) {
//     return 2 ** 31 - 1
//   }
//   if (r <= -(2 ** 31)) {
//     return -(2 ** 31)
//   }
//   return r
// }


var myAtoi = function(s) {
    // 先去掉收尾空格
    let i = 0
    let sign = 1
    let res = 0
    let INT_MAX = 2**31 -1
    let INT_MIN = -(2**31)
    while(s[i] === ' ') i++

    if(s[i] === '+' || s[i] === '-') {
        sign = s[i] === '+' ? 1 : -1
        i++
    }

    while(s[i] >= '0' && s[i] <= '9') {
        res = res * 10 + (s[i] - 0)
        if (sign === 1 && res > INT_MAX) {
            return INT_MAX
        }
        if (sign === -1 && res > INT_MAX + 1) {
            return INT_MIN
        }
        i++
    }
    return sign * res
}
console.log(myAtoi("4193 with words"))
// @lc code=end

// 思路：
// 1 首字符是空格的情况全部去掉
// 2 去掉空格后，然后首字母是符号的情况，记录下 sign(tips: 使用 1 或 - 1记录 + 或 - 号)
// 3 判断数字可以使用 s[i] >= '0' && s[i] <= '9' 字符大小的比较 
    // (注意：使用的是 &&，不是 ||)
    // (注意：可以使用这种方式拼接数字 res * 10 + (s[i] - 0)，而不是仅仅使用字符的方式拼接)
// 4 判断是否有溢出，溢出直接返回
// 5 数字乘以正负号返回结果


// 复盘：
// 第一次没解决成功，是因为解决思路问题问题，总想使用 for 循环，
// 使用for循环，会使判断空格和判断加减号的这些条件在后面的字符中也执行，导致逻辑混乱
// 其实是可以使用 i++ 的方式，结合 while 循环不断向下迭代的

