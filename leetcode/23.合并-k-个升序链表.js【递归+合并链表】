/*
 * @lc app=leetcode.cn id=23 lang=javascript
 *
 * [23] 合并 K 个升序链表
 *
 * https://leetcode.cn/problems/merge-k-sorted-lists/description/
 *
 * algorithms
 * Hard (58.87%)
 * Likes:    2766
 * Dislikes: 0
 * Total Accepted:    760.4K
 * Total Submissions: 1.3M
 * Testcase Example:  '[[1,4,5],[1,3,4],[2,6]]'
 *
 * 给你一个链表数组，每个链表都已经按升序排列。
 *
 * 请你将所有链表合并到一个升序链表中，返回合并后的链表。
 *
 *
 *
 * 示例 1：
 *
 * 输入：lists = [[1,4,5],[1,3,4],[2,6]]
 * 输出：[1,1,2,3,4,4,5,6]
 * 解释：链表数组如下：
 * [
 * ⁠ 1->4->5,
 * ⁠ 1->3->4,
 * ⁠ 2->6
 * ]
 * 将它们合并到一个有序链表中得到。
 * 1->1->2->3->4->4->5->6
 *
 *
 * 示例 2：
 *
 * 输入：lists = []
 * 输出：[]
 *
 *
 * 示例 3：
 *
 * 输入：lists = [[]]
 * 输出：[]
 *
 *
 *
 *
 * 提示：
 *
 *
 * k == lists.length
 * 0 <= k <= 10^4
 * 0 <= lists[i].length <= 500
 * -10^4 <= lists[i][j] <= 10^4
 * lists[i] 按 升序 排列
 * lists[i].length 的总和不超过 10^4
 *
 *
 */

// @lc code=start
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode[]} lists
 * @return {ListNode}
 */
class ListNode {
  constructor(val, next = null) {
    this.val = val
    this.next = next
  }
}

var mergeKLists = function (lists) {
  if (!lists || lists.length === 0) {
    return null
  }
  let mergeTwoList = (ln1, ln2) => {
    let dummy = new ListNode(-Infinity)
    // dummy 节点是个临时的哑节点，作为头节点
    // 维护两个指针 prev、current1 和 current2
    // 分别指向当前合并后链表的节点
    let pre = dummy
    let current1 = ln1
    let current2 = ln2
    while (current1 && current2) {
      if (current1.val < current2.val) {
        // 链接两个节点
        pre.next = current1
        // 更新两个指针，为了合并后续的链表节点
        pre = current1
        current1 = current1.next
      } else {
        pre.next = current2
        pre = current2
        current2 = current2.next
      }
    }
    if (current1) {
      // 合并剩余的链表节点
      pre.next = current1
    }
    if (current2) {
      pre.next = current2
    }
    return dummy.next
  }

  let merge = (lists, start, end) => {
    if (start === end) {
      return lists[start]
    }
    let mid = Math.floor((start + end) / 2)
    let left = merge(lists, start, mid)
    let right = merge(lists, mid + 1, end)
    return mergeTwoList(left, right)
  }
  return merge(lists, 0, lists.length - 1)
}
// @lc code=end
