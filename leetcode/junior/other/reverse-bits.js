// 颠倒二进制位
// 颠倒给定的 32 位无符号整数的二进制位。

// 示例 1：
// 输入: 00000010100101000001111010011100
// 输出: 00111001011110000010100101000000
// 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。

// 示例 2：
// 输入：11111111111111111111111111111101
// 输出：10111111111111111111111111111111
// 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。

// 提示：
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。

// 进阶:
// 如果多次调用这个函数，你将如何优化你的算法？

/**
 * @param {number} n - a positive integer
 * @return {number} - a positive integer
 */
// 方法：循环和二进制转换

// 将十进制转二进制
// => 二进制字符串转数组
// => 反转数组
// => 不足32位用 0 补足（因为在十进制转二进制时得到的二进制字符串是从最后一位为 1 开始的二进制数，前面的 0 默认被省略了，不足 32 位）
// => 将二进制转十进制
var reverseBits = function(n) {
  let binaryArr = parseInt(n)
    .toString(2)
    .split('')
    .reverse()
  let rest = 32 - binaryArr.length
  while (rest > 0) {
    // 不够的位数用 0 补足
    binaryArr.push('0')
    rest--
  }
  let binaryNum = binaryArr.join('')
  let targetNum = parseInt(binaryNum, 2)
  return targetNum
}

console.log(reverseBits2(43261596))
